

// Let's start manipulating the dom, yeah?

for (var i = 0; i < 45; i++) {
  var newParagraph = document.createElement('div');

  newParagraph.appendChild(document.createTextNode("This was generated by the script!"));
  
  document.getElementById("content").appendChild(newParagraph);
}



// Let's lay out some data structures, shall we?

/* CONSTANTS */
const IMAGE_DIR = "./res/stocks"


/* Files */

const meleeStocks = {
  subdir: "melee",
  chars: [
    "bowser.png",
    "dk.png",
    "doc.png",
    "falco.png",
    "falcon.png",
    "fox.png",
    "ganon.png",
    "gnw.png",
    "ics.png",
    "kirby.png",
    "link.png",
    "luigi.png",
    "mario.png",
    "marth.png",
    "mewtwo.png",
    "ness.png",
    "peach.png",
    "pichu.png",
    "pikachu.png",
    "puff.png",
    "roy.png",
    "samus.png",
    "sheik.png",
    "ylink.png",
    "yoshi.png",
    "zelda.png",
  ],
}


function rangeValidationCurry(min, max) {
  return function(val) {
    return (val >= min && val <= max);
  }
}

const inputFilters = new Map([
  ["input-players", rangeValidationCurry(1, 4)],
  ["input-characters", rangeValidationCurry(1, 23)],
])



var roster = [];





// Event Handlers


// I'm going to try to restrict the input on my own
// I'm going to steal that guy's strategy of using a higher order function tho

function applyInputFilter(filter, input) {
  // For every event we need to check the
  ["input"].forEach(function(event) {
    input.addEventListener(event, function(e) {
      // Test out the filter against the value
      if (filter(e.target.value) || !e.target.value) {

      } else if (this.hasOwnProperty("oldValue")) {

      } else {
        
      }
    });
  });
}

function applyInputFilterForID(id) {  
  applyInputFilter(inputFilters.get(id), document.getElementById(id));
}


applyInputFilterForID("input-players");

// document.getElementById("input-players").addEventListener("input", function(e) {
//   console.log(this.value + "[" + this.oldValue + "]");
//   this.oldValue = this.value;
// })






// Helper functions
function joinImagePath(baseDir, subdir, fileName) {
  return baseDir + "/" + subdir + "/" + fileName;
}